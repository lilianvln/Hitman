from enum import Enum
from typing import Dict, List, Tuple

__maintainer__: str
__status__: str
ASCII_ART: str

class HC(Enum):
    EMPTY: int
    WALL: int
    GUARD_N: int
    GUARD_E: int
    GUARD_S: int
    GUARD_W: int
    CIVIL_N: int
    CIVIL_E: int
    CIVIL_S: int
    CIVIL_W: int
    TARGET: int
    SUIT: int
    PIANO_WIRE: int
    N: int
    E: int
    S: int
    W: int

world_example: List[List[HC]]
complete_map_example: Dict[Tuple[int, int], HC]

class HitmanReferee:
    def __init__(self, filename: str = ...) -> None:
        self.__filename: str = ...
        self.__world: List[List[HC]] = ...
        self.__m: int = ...
        self.__n: int = ...
        self.__civil_count: int = ...
        self.__guard_count: int = ...
        self.__civils: Dict[Tuple[int, int], List[Tuple[Tuple[int, int], HC]]] = ...
        self.__guards: Dict[Tuple[int, int], List[Tuple[Tuple[int, int], HC]]] = ...
        self.__phase: int = ...
        self.__phase1_penalties: int = ...
        self.__phase1_guess_score: int = ...
        self.__phase2_penalties: int = ...
        self.__pos: Tuple[int, int] = ...
        self.__orientation: HC = ...
        self.__has_guessed: bool = ...
        self.__is_in_guard_range: bool = ...
        self.__is_in_civil_range: bool = ...
        self.__phase1_history: List[str] = ...
        self.__phase2_history: List[str] = ...
        self.__has_suit: bool = ...
        self.__suit_on: bool = ...
        self.__has_weapon: bool = ...
        self.__is_target_down: bool = ...
        ...
    def __compute_civil_count(self) -> int: ...
    def __compute_guard_count(self) -> int: ...
    def start_phase1(self) -> Dict: ...
    def send_content(self, map_info: Dict[Tuple[int, int], HC]) -> bool: ...
    def end_phase1(self) -> Tuple[bool, str, List, Dict]: ...
    def __get_status_phase_1(self, err: str = ...) -> Dict: ...
    def __get_world_content(self, x: int, y: int) -> HC: ...
    def __update_world_content(self, x: int, y: int, new_content: HC) -> None: ...
    def __get_listening(self, dist: int = ...) -> int: ...
    def __get_offset(self) -> Tuple[int, int]: ...
    def __get_vision(self, dist: int = ...) -> List[Tuple[Tuple[int, int], HC]]: ...
    def __get_status_phase_2(self, err: str = ...) -> Dict: ...
    def end_phase2(self) -> Tuple[bool, str, List]: ...
    def kill_target(self) -> Dict: ...
    def neutralize_guard(self) -> Dict: ...
    def neutralize_civil(self) -> Dict: ...
    def take_suit(self) -> Dict: ...
    def take_weapon(self) -> Dict: ...
    def put_on_suit(self) -> Dict: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __compute_civils(
        self,
    ) -> Dict[Tuple[int, int], List[Tuple[Tuple[int, int], HC]]]: ...
    def __get_civil_offset(self, civil: HC) -> Tuple[int, int]: ...
    def __get_civil_vision(
        self, civil_x: int, civil_y: int
    ) -> List[Tuple[Tuple[int, int], HC]]: ...
    def __seen_by_civil_num(self) -> int: ...
    def __compute_guards(
        self,
    ) -> Dict[Tuple[int, int], List[Tuple[Tuple[int, int], HC]]]: ...
    def __get_guard_offset(self, guard: HC) -> Tuple[int, int]: ...
    def __get_guard_vision(
        self, guard_x: int, guard_y: int, dist: int = ...
    ) -> List[Tuple[Tuple[int, int], HC]]: ...
    def __seen_by_guard_num(self) -> int: ...
    def __add_history(self, action: str) -> None: ...
